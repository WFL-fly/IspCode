/******************************************************************************** aew_macro.h** Copyright (C) 2019-2021 ZheJiang Dahua Technology CO.,LTD.** Author : Yan Hongsheng  <yan_hongsheng@dahuatech.com>* Version: V1.0.0  2019-9-1 Create** Desc: ISP宏定义管理模块和统一的数据类型** Modification:*    Date    :*    Revision:*    Author  :*    Contents:*******************************************************************************/#ifndef _AEW_MACRO_H_#define _AEW_MACRO_H_/* ========================================================================== *//*                          ISP公共宏定义区                                   *//* ========================================================================== */#ifndef ABS#define ABS(a)	((a) > 0 ? (a) : -(a))#endif#ifndef MAX#define MAX(x, y)	(((x) > (y)) ? (x) : (y))#endif#ifndef MIN#define MIN(x, y)	(((x) < (y)) ? (x) : (y))#endif#ifndef CLIP_VAL#define CLIP_VAL(a, low, high) (a) < (low) ? (low) : ( (a) > (high) ? (high) : (a) )#endif#ifndef DIV#define DIV(a,b) (((b) == 0) ? 0 : (a) / (b))#endif#ifndef FLOAT2INT#define FLOAT2INT(a) (int)( (a >= 0) ? (a + 0.5) : (a - 0.5) )#endif#ifndef LOG2_FLOOR#define LOG2_FLOOR(_x, _rlt) {int32_t _i=-1,_x1=(_x);while(1<<(++_i)<=_x1);_rlt=_i-1;}#endif#ifndef FLOTOFIX#define FLOTOFIX(fix_t,FIX_FRACBITS, x) (fix_t)( (x) * (1 << FIX_FRACBITS) )#endif#ifndef ARRAY_SIZE#define ARRAY_SIZE(array) (sizeof(array)/sizeof((array)[0]))#endif#ifndef FLOAT_EPSILON#define FLOAT_EPSILON   (0.0001f)#endif#ifndef FLOAT_IS_ZERO#define FLOAT_IS_ZERO(_val) ((((_val) > -FLOAT_EPSILON) && ((_val) < FLOAT_EPSILON))? 1 : 0)#endif/* 内存操作*/#define OSA_clear(ptr)		        	memset((ptr), 0, sizeof(*(ptr)))	#define OSA_clearSize(ptr, size)        memset((ptr), 0, (size))#define OSA_memCmp(dst, src)            memcmp((dst), (src), sizeof(*(src)))#define OSA_memCmpSize(dst, src, size)  memcmp((dst), (src), (size))/*定义函数入参判断宏, 返回OSA_EFAIL*/#define CHECK_FUNC_ARG(condition) \do \{ \    if(!(condition)) \    { \        printf("Invalid arg\n"); \        return ALG_EXX; \    } \}while(0)/*定义函数入参判断宏, 返回NULL*/#define CHECK_FUNC_ARG_RETPTR(condition) \do \{ \    if(!(condition)) \    { \        printf("Invalid arg\n"); \        return NULL; \    } \}while(0)#endif /* _AEW_MACRO_H_ */